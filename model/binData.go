// This represents an empty user_data.db file when exported by
// JWLibrary. We use this as the base to reconstruct a
// merged backup file.

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// user_data.db (159.744kB)

package model

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _user_dataDb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xdc\x4f\x6f\x1b\x67\x7e\xc0\xf1\x19\xd9\x16\x25\xda\xb2\x9c\x75\x1c\xae\x76\xa3\xcd\xa3\xc4\x8a\x48\x98\xb1\x25\xb9\x41\xd7\x59\xb8\x5d\x8a\x1a\x29\xac\x28\x4a\x26\x47\x4e\xb4\x41\xc1\x1d\x89\x63\x9a\x15\xc9\xd1\x92\xc3\x24\x02\x8a\x5d\xd0\x8d\xdb\x0d\x16\xe8\x65\x4f\x7b\x29\x7a\xdf\xf7\xd0\x43\xfb\x02\x8a\x1e\x8a\x16\xe8\xb9\xc0\xa2\xb7\xdd\x00\x3d\x34\x28\x50\xcc\x0c\x47\xf3\x97\x94\xec\x75\x57\x00\xf3\xfd\x00\x09\x87\xcf\xbf\xf9\xcd\x33\xcf\xcc\x3c\xcf\xd0\x76\xe5\x51\xb1\x61\xea\xe2\x89\xd1\x69\x69\xa6\xb8\x2f\xdd\x90\x64\x59\xfa\xa1\x10\x92\x24\xbd\x26\x49\xd2\x92\xe4\x79\x2c\x49\xd2\x65\xdf\x77\x59\x92\xa4\x29\x69\xb4\xd7\xa4\xbb\xf9\x7f\xba\x22\x49\xd2\xc4\xec\x7f\x5b\xdf\xdf\x9a\xfd\xda\xd9\x00\x00\x00\x00\x00\x00\x7f\x00\xdf\x7a\xdd\x5a\x9e\xcf\xcc\x58\xdb\x37\x2e\x3a\x18\x00\x00\x00\x00\x00\xf0\xff\xc9\x5a\xff\xcb\xb3\xbf\x91\x66\x7f\x73\xd1\x91\x00\x00\x00\x00\x00\x80\xdf\xd7\x1b\xf2\xc4\xfb\xab\xcb\xab\xcb\xef\x2d\x7f\xff\xbd\x95\x15\x75\xe5\x8f\x3e\x58\x5e\xfe\x60\xe5\x8f\x7f\xc4\xef\xff\x00\x00\x00\x00\x00\x8c\xbf\xa4\xc4\xfa\x1f\x00\x00\x00\x00\x80\x71\xe7\xfc\xf9\xff\xdf\x4a\xb3\xbf\xbd\xe8\x48\x00\x00\x00\x00\x00\xc0\x2b\x33\x23\x5f\x91\xa6\xe6\xa5\x0d\xed\x53\xa3\xd3\x30\xf5\xa4\xbd\xfe\xff\x4a\x9a\xfd\xea\xa2\x03\x03\x00\x00\x00\x00\x00\xaf\xd0\xb5\xcb\x53\xf3\xd3\xee\xfa\x9f\xbf\xff\x0f\x00\x00\x00\x00\xc0\xf8\xe3\xef\xff\x03\x00\x00\x00\x00\x30\xfe\x58\xff\x03\x00\x00\x00\x00\x30\xfe\x58\xff\x03\x00\x00\x00\x00\x30\xfe\xf8\xfb\xff\x00\x00\x00\x00\x00\x8c\x3f\x7e\xff\x07\x00\x00\x00\x00\x60\xfc\xf1\xfb\x3f\x00\x00\x00\x00\x00\xe3\x8f\xdf\xff\x01\x00\x00\x00\x00\x18\x7f\xac\xff\x01\x00\x00\x00\x00\x18\x7f\x33\xd7\xaf\x49\x33\xd2\xba\x74\xfd\xef\xaf\xbf\x9e\xfc\xcf\x99\xff\x98\xfe\x75\xf2\x1f\xae\x3c\x9f\xfe\xe9\xf4\xa3\xe9\xdb\x13\xff\x33\xf1\x2f\xd2\xfa\xc4\x27\x13\x9f\x8c\x6e\xe3\x79\x72\x26\x91\x5a\x5a\x92\xbf\xac\x98\xda\x41\x53\xdf\x6d\x6a\x27\xcd\x46\xd7\xdc\xd6\x6b\x0d\x2d\xf0\xe5\x7a\xbe\xac\xe4\x54\x45\xa8\xb9\xb5\xa2\x22\x02\x59\xe9\xa4\x10\x22\x98\x54\xa8\x59\x49\xa2\x50\x52\x95\x4d\xa5\x2c\x4a\x3b\xaa\x28\xed\x15\x8b\x62\xb7\x5c\xd8\xce\x95\xf7\xc5\x96\xb2\x9f\xb5\x6b\xd9\xa5\xd5\x93\x63\x5d\x78\xc2\xb5\x9c\x92\x45\xed\x40\x6f\x8a\x20\x55\xf9\x58\x75\x72\x37\x1a\x4d\xbd\xad\xb5\xf4\x70\xae\xd8\x2b\x15\x1e\xed\x29\x83\x26\x8c\x43\xcd\x6c\x18\xed\x41\x74\xfe\x9d\x0d\x5a\xd9\x29\x2b\x85\xcd\x92\x15\x5e\xda\x2b\x9c\x11\x65\x65\x43\x29\x2b\xa5\xbc\x52\x39\x6d\xc3\x9f\xef\x54\xce\xef\x94\x2a\x6a\x39\x57\x28\xa9\xde\x51\x55\x7d\xbb\x74\x22\x49\x9f\xe6\x65\x45\xb4\x89\x0f\x95\xfc\x96\xd3\x9d\x16\xdf\x3e\x44\xa1\xe2\xf4\x60\xae\xb4\xee\x1d\xac\x95\xe8\x76\xad\x95\xe1\xf4\x91\x2f\x35\x23\x76\xca\x43\x9b\xf3\xd7\x0c\x34\x19\x6d\xee\xa5\x9b\x72\xe3\x08\x1c\xa0\x77\xd2\x0b\xa5\xf4\x4a\x56\xac\x66\xc5\xfd\x4c\x26\x99\x59\xba\x36\x99\xfa\xc1\x2d\x59\x6a\xb4\x6b\xfa\xe7\xdd\x9f\x34\x1b\xa6\x5e\xd5\x7a\xa6\x61\x7f\xaf\x96\x0c\x53\xaf\xae\x58\xff\x9f\x79\x3e\x75\x35\x91\xba\x75\x4b\xfe\xb2\x6b\x8f\x5a\x2b\xcd\xfa\xef\x5a\x60\x8c\xbe\x6d\x25\xbd\x2d\x9c\xee\xb4\xb6\x63\x4e\xfb\x88\x91\xb9\xd9\x6b\xd4\x22\xa3\xe9\xb4\xb8\x7f\x58\xed\x75\xf5\xce\xb6\xd6\x39\x72\xdb\x0f\x0c\xa9\xf0\x98\x0b\x64\xaa\x0d\xb3\xa9\xc7\x8e\xe7\xbc\xd1\x36\xf5\xb6\x19\x93\x53\xd4\xba\xe6\xb6\x51\x6b\x3c\x69\xe8\xb5\x68\x5c\xeb\xca\x46\x6e\xaf\xa8\x8a\x74\xd7\xec\x3c\x31\x1b\x2d\x3d\xbd\xb4\xb8\xff\xde\x62\xeb\xbd\xc5\x9a\xba\xf8\xe1\x07\x8b\xdb\x1f\x2c\x56\x7e\xb4\x94\x15\x4b\x6d\xe3\xb3\x25\xf7\xac\xac\x35\x8d\xc3\x23\xdf\x45\x18\xe9\x1c\xb7\xd5\x65\x5f\xf9\x42\x4d\x6f\x9b\x56\x14\x9d\xe0\x31\x39\xa7\x38\xed\xb5\xf9\x50\x2c\xdb\xe3\x22\x52\xcb\x1b\x57\xc2\x5f\x7e\x4d\x51\x3f\x52\x94\x92\x58\xb1\x6b\xad\x66\x86\x56\x0e\x8d\x2d\xff\xc5\xeb\x9d\x92\xc0\xc5\xeb\x26\xfb\xf3\x7f\xaf\x2b\x3f\x99\xf9\x9b\x37\x13\x89\xd4\xdc\x9c\xfc\xb7\x37\xed\xa1\xa8\x6a\xf5\x6d\xed\xd8\xf9\xff\x54\x70\x38\x3a\x89\xee\x80\x74\xbe\xbd\xd8\x90\x74\x6f\xb1\x05\x53\x6f\x39\x35\x47\x0e\xb5\x50\x76\xf8\x12\x08\x8f\x45\xad\x1e\xcc\x1d\x72\x1f\xde\x35\xba\x0d\x6b\x2f\x67\x95\xf3\xf7\xa8\xdd\x76\xa0\x33\x55\xad\x3e\x48\x8d\x96\x0e\x1e\x66\xa0\x9a\x3f\x2b\x5c\xee\x15\xdc\xc2\xfd\x95\x9d\xee\x0a\x54\xb4\x92\xdc\xf4\xc8\x3d\xdf\x3e\x9a\xea\x69\xef\x0c\xee\xf6\x76\x6a\xf6\xb4\xd3\x86\x55\x1b\x9c\x9b\x60\xa5\xd1\x7b\x8a\x3e\x59\x06\xd5\xce\x7c\xaa\x0c\x76\x16\xb8\xd3\xc7\x3f\x68\x42\x03\xee\xbc\x0f\x96\x11\xd5\xdd\x2c\x5f\x0c\xb1\x2d\x9e\xaf\xea\x90\xf0\x4f\x6f\x0c\xc9\xcc\x9d\xe4\x64\xea\x4f\xe7\x86\x3d\x52\x9c\x8b\xb0\x7a\xdf\xf9\xbc\x7a\x67\xfa\x1c\x85\x57\x9d\xcf\xe4\x9d\xa9\x73\x14\x5e\x71\x3e\xa7\x9f\xdd\xb8\x92\x48\xdd\xbc\x29\x7f\x91\x70\xef\x12\xaa\x56\x9f\x8c\xdc\x1f\x7c\x37\x87\xc0\xb5\x78\xf6\xad\x21\x34\x85\x1a\x72\x4d\x96\xe2\x66\x48\xc1\x22\x85\x96\x56\xd7\x7d\xb3\x29\xef\xc1\xe3\x8e\x32\x7b\xea\x62\xb5\x14\x18\x5e\x4d\xbd\x5d\x37\x9f\xa6\xed\x74\xf1\x27\x62\x39\x90\x39\x78\xd6\x8b\xf4\x72\x56\x58\xcf\x7b\xeb\xcc\x2c\x4e\x4e\xa6\x1e\xdc\x1c\xd1\x7f\x76\xe7\x25\x9e\x77\x2f\x25\x52\xf3\xf3\xf2\x2f\x1e\xd8\x3d\xb7\x66\x18\x47\x2d\xad\x73\xe4\x7e\x5e\x0e\xf6\xa1\x9b\xec\x76\xa4\xfb\x3d\x74\x67\x3b\x47\x87\xc6\xcd\x15\x47\xdc\x14\x7b\x07\xcd\x86\x53\x21\x50\x31\xbe\x74\xa5\x69\x98\x22\x46\x7c\xe9\xf0\x24\x61\xc4\xc9\xab\xb4\x1b\xc7\xc7\x7a\xb4\x6d\xef\x24\x86\x1f\xf5\x43\x3b\xe4\x8c\x47\x7e\xa8\xde\x2b\xbe\xf7\xc6\x76\xe7\x8b\x4f\xc3\x63\x9b\xa9\xda\xbd\xef\x0c\x66\x11\xbf\xa7\xac\x7d\x86\x32\x17\x36\x9f\x49\x66\xee\x5d\x9e\x4c\xe5\xe7\x87\x5d\x1c\xee\xa8\xae\xae\xb8\x5b\x57\x24\x49\x9a\xb2\xd6\x73\xfd\xe9\x89\x44\x6a\x71\x51\xee\xef\xd9\x97\x8b\x7f\xb2\xe8\xdf\xbe\x14\xb8\x6c\xfc\x39\xe9\xc0\xfc\x32\x76\x72\x79\xce\xb9\x65\xe6\xd9\x9f\xcb\x89\xd4\xc2\x82\xfc\xfc\x8a\x73\xe9\x5a\x87\x5c\xd6\xda\x75\xdf\xd6\x44\x20\x0e\x2f\x5d\xa4\x7d\x5f\x02\x53\x9d\xf8\x4b\xf6\xcc\x29\x6c\x56\x84\x07\x6f\xb4\x44\xc5\xd4\x3a\xa6\x6a\x1c\xe9\xed\xe0\xd8\x16\x4a\xbb\xe6\x4b\xf6\x65\x0c\x99\xf9\xfb\xda\xb4\x47\x8f\x18\x31\x1a\xb2\x2f\x3b\x6f\x15\x99\x99\xcb\xb7\xa5\xc4\xc4\xcf\xa5\xe9\xff\x9d\xfe\xc7\xc4\x0f\x2f\x67\x27\x7e\x7e\xe9\xab\xab\x33\x13\x1f\x4d\xbc\x2b\x5f\x4e\xfe\x7b\xf2\xa9\x94\x96\xa4\x89\x77\x25\xe9\xf2\xed\x89\x1f\xff\x81\x5e\x49\xe0\x1b\xe8\xd9\xd3\x6f\xd9\x8f\xe8\xe7\xef\xd8\xd7\xb9\x3b\x46\xdd\xcf\x5b\xc1\x47\xb4\x9b\xec\x3e\xa2\xcf\xba\x86\xa2\x8f\xe6\xbc\xd1\x34\x3a\x05\xeb\x4e\x38\xea\xb1\x39\x64\xe1\x1d\x7e\x62\x9a\x27\x4d\xfd\xcc\xb6\xdc\x18\xdd\x77\x02\xc3\xdf\x05\x3c\xd6\x3b\x5d\xff\xe2\xe8\xec\xb5\xd1\x0b\xad\x36\xef\xdd\x1c\xf5\x5c\x70\xc3\xac\xae\xb8\x5b\x6f\x24\xbf\xef\x3c\x17\xfe\xfa\xb5\xd7\x12\xa9\x7b\xf7\xe4\x5f\x3c\x0a\xbc\xe7\xb3\xa6\xd7\xf9\xa7\x8d\x66\x2d\x92\xf0\x7a\xec\xfb\xbe\xd3\xec\x74\x64\x41\x6a\x27\x87\x67\x4b\xe7\x3a\x9f\x6b\x5a\x57\x5f\xef\x75\xec\xa3\x54\x1b\x87\x47\xdd\x98\xc9\x4e\x7c\x3f\x5a\x87\xa8\x77\x62\x76\x1a\xad\xe9\xaf\x10\xf7\x2a\xd1\xe3\x4d\x96\x9c\xd2\xce\x63\xa1\xd1\xd2\x63\x63\x8b\x69\xde\x7a\x5c\x74\xb4\xb6\xb3\xe2\x8b\x1c\x58\xa0\x42\x74\x45\x7f\xde\x43\x1f\xb5\x60\x76\xbd\xd0\xc2\x39\xbc\x4a\x3c\xed\x5b\xff\x42\xcb\xdf\x7f\xd1\xf4\x50\x4f\x45\x0b\x8c\xe8\x99\xd8\xb7\x8c\x81\x18\xfc\xef\x18\xc3\x71\x44\xf3\x62\x62\x71\xe7\x57\x76\xfb\x99\x64\xe6\x8b\x9f\xdd\xb0\xe7\x4a\x5f\xe6\x22\xd7\x84\x7f\xfb\xe6\xd0\x2b\x21\x7a\x11\x44\xce\xe1\x39\x16\x1a\xa3\x06\x63\xcc\x1c\x3f\x77\x78\xd8\xeb\x68\x87\x27\x15\x53\x33\xf5\x96\xff\x1d\xe1\x88\x9b\xdc\xa0\x2f\x76\x9e\x3c\xe9\xea\x66\x70\x1c\x07\xc6\xa3\x75\x82\x86\x94\x8b\x96\xcc\x1d\x06\xdf\x03\x9d\x15\x86\xfa\xb4\xd7\x3a\x68\x6b\x8d\xe6\xb0\x97\xf5\xd9\xa1\x3f\x24\xbc\xc4\xc5\x30\xa8\x1e\xfb\xfa\xc8\xf9\xd9\x22\x5c\x32\x66\x39\x6b\x9f\x9c\xe8\x7a\x36\x7a\x0e\x0a\x25\x77\x6d\x6b\xbf\xcb\xf6\x17\xf6\x7a\x2a\x54\x28\x99\x79\x30\x3b\x99\xda\x5e\x1a\x76\x3b\x0f\xc4\x57\x5d\x0d\x7c\xbd\xf1\xe0\xfa\xf9\xab\xae\x04\xbe\xce\x4a\x92\xf4\xaf\x17\x3d\x67\x78\xe5\xbe\x3c\x7e\xdd\x9e\x84\xfc\xf2\xbe\xb3\xf0\x31\x82\x8b\xba\x54\x70\x12\xe2\x26\xbb\x93\x10\x31\x7c\xc5\x7f\xf6\x15\x2c\x06\x2f\x1a\x4a\xbd\xd6\x81\x6f\x69\x1c\xb9\x64\xec\x21\xf1\x54\x3b\x36\xf5\x4e\xb8\x68\xa4\xdc\xba\x71\xd8\xb3\x06\x56\x7c\x30\x5e\x39\xb5\xa3\x1d\x1e\x0d\xbd\x00\xbd\x72\x85\x6e\xb7\xa7\xab\x5a\x3d\xb4\xe3\xb3\x96\xfd\x96\x2d\xfd\xa4\x72\xd2\x3a\x30\x42\x37\x29\xef\x82\x15\xf6\xef\x78\xc7\xdd\xa2\xd6\xae\xf7\xb4\xfa\xd9\x3f\xe5\x89\x98\x17\x56\x67\x57\x88\x7f\x0d\x12\x0c\x63\xf0\x8e\xca\x3b\x1b\xd9\x60\x8f\x67\xbd\xa3\xc9\x06\x62\xce\xda\x01\x65\x22\x2d\xf9\x8a\x07\xbb\x30\x5c\xdd\x3b\x61\x59\xe7\xa4\x44\x5a\x1c\x2c\x05\x93\xfe\xe8\xd3\x69\x75\x7f\x57\x39\x7d\x35\xe6\xbc\x1b\xf0\x3a\x3c\xf0\x7a\x34\x57\x5a\x0f\xd7\xf5\xbf\x8e\x48\xfb\x86\x4c\xf8\x91\xe8\xcb\x5a\x78\x28\x96\x07\xaf\x20\xbc\x21\xeb\x7f\x52\x07\x47\xa8\x3f\xc7\x19\x6b\x71\x0f\x6a\x3b\x9c\x40\x34\xa1\x60\xdc\x26\xd2\xa1\x9d\xfa\x83\xf4\x65\x79\x41\xa6\xa3\xe1\xf8\xeb\x04\x73\xbd\x6a\xe7\x0b\x75\xe5\xe5\xfa\x61\xc8\xb1\x05\xf7\x99\x19\xb2\x57\xeb\x54\xdb\xb7\xff\x17\xde\x77\xe6\xb4\xb5\xc1\x0c\x86\x7f\xff\x0f\x00\x00\x00\x00\x80\xf1\xc7\xfa\x1f\x00\x00\x00\x00\x80\xf1\xc7\xfa\x1f\x00\x00\x00\x00\x80\xf1\xc7\xbf\xff\x0f\x00\x00\x00\x00\xc0\xf8\xe3\xf7\x7f\x00\x00\x00\x00\x00\xc6\x1f\xbf\xff\x03\x00\x00\x00\x00\x30\xfe\x58\xff\x03\x00\x00\x00\x00\x30\xfe\xf8\xf3\xff\x00\x00\x00\x00\x00\x8c\x3f\x7e\xff\x07\x00\x00\x00\x00\x60\xfc\xb1\xfe\x07\x00\x00\x00\x00\x60\xfc\xb1\xfe\x07\x00\x00\x00\x00\x60\xfc\xb1\xfe\x07\x00\x00\x00\x00\x60\xfc\xcd\x58\xcb\xff\xc4\xaf\xa4\xd9\x7f\x9e\xfd\xbb\xeb\x7f\x79\x7d\x73\xe6\xdf\xae\x7d\x7d\xed\x2f\xae\xfe\xd7\xd5\x1f\x27\xbf\x4e\xfe\x3a\x39\x3b\xfd\xb3\xa9\xaf\xa7\x7e\x99\xf8\xd5\x45\xc7\x09\x00\xc0\x37\x42\xff\xb3\xdb\x89\x5b\x8b\x8b\x53\x7f\xf5\xfe\xa7\x0d\xfd\xb3\xdd\xa6\x76\xd2\x6c\x74\xcd\xc7\xa1\xed\x7c\x59\xc9\xa9\x8a\x78\x5c\x50\x3e\x12\xfe\x74\x91\xab\x24\x85\xa8\x28\x45\x25\xaf\x0a\xf3\x6e\x49\x6b\xe9\x59\x61\xde\x2d\xb4\xb4\xba\xbe\xd1\x68\xea\x6d\x3b\x21\x6f\xf4\xda\x66\xda\x6c\xdd\x55\xb5\x7a\xa1\x96\x11\xb9\x8a\x28\x98\x7a\xcb\x4e\x4e\x0a\xb1\x51\xde\xd9\x16\xaa\x56\x17\xa6\x28\x2a\x1b\xaa\xf8\xb3\x9d\x42\xc9\xfa\xbe\xad\x1d\x0b\xb3\x25\x76\x4a\xc2\xad\xfa\xd0\x74\x3e\x93\x42\x7c\xf4\xa1\x52\x56\x84\x79\x57\x3d\x39\xd6\x1f\xae\x26\x85\xd8\x2c\xef\xec\xed\x8a\xb5\x7d\xe1\x95\xd9\x29\xaf\x2b\x65\x27\xc9\x8a\x4c\xe4\x77\x8a\x45\xeb\x30\x4a\x3b\xf9\x5c\x45\x79\xf2\x4e\x22\xf5\x60\x5e\xee\x5f\x6a\xb4\x6b\xfa\xe7\x85\x8f\xab\x7b\x5d\xbd\xb3\xad\x75\x8e\xaa\x45\xe3\x50\x33\x1b\x46\xbb\x50\x73\x93\x96\x06\x1d\x50\x28\xad\x2b\x1f\x8b\xf8\xb2\x56\xa0\x6e\x72\xda\x4b\xce\xf4\xe5\xb7\x13\xa9\xad\x39\xb9\x7f\xc7\xdd\x91\x73\x6c\xd5\x92\x61\xea\x85\x5a\xd5\x8e\xb6\xba\x6b\x74\x1b\x56\x05\x27\xef\xdd\xf0\xfe\x46\x55\xb1\x76\xec\xe4\xa7\x9d\xfc\xac\xb0\x0b\x64\x85\x5b\x22\xd3\x9f\x59\x48\xa4\x2a\x73\x72\xff\x07\xa1\x18\xbc\x38\x63\xe3\x58\x1c\x12\xc7\xd0\x6a\xbe\x58\xbc\x32\x31\xf1\xcc\x89\x44\xea\x93\x39\xb9\xbf\x15\x8a\xc7\x1d\x5c\xd6\xf8\x18\x12\xd3\xed\x21\x31\x8d\xac\xea\x8b\x2b\x58\x2e\x1a\x5b\xe9\xad\xc9\xd4\x9d\x39\xb9\x1e\x8a\xcc\x2e\xe6\x6c\xbf\x33\x24\x02\xbb\x88\x6f\x4f\xce\x70\x3f\xfc\x5e\x22\xf5\xe0\xa6\xdc\x4f\xf8\x1a\xac\x5a\xe3\xb1\x6a\x8d\xdd\xd3\x76\xdf\x8e\x69\x34\x5c\x6c\xd0\x76\xda\xb9\xce\xac\xf4\x41\xf8\x99\x7e\x62\x3e\x91\x7a\x74\x4b\xee\xbf\xef\xee\xc5\x1a\x0a\xfe\xf3\xb4\xd6\x34\x0e\x8f\x0a\x35\xbd\x6d\x36\x9e\x34\xf4\x8e\x95\xbd\x10\xde\xe5\x19\x75\xac\xdd\x5b\x45\x02\xa7\x36\x54\x26\xf3\xd3\x37\x13\xa9\xad\x5b\x72\x3f\x13\x0c\x44\xeb\x9a\xdb\x46\xcd\x2a\x52\xf3\xed\xc1\xca\x13\xf1\x51\xc4\x57\xf0\x42\xf0\xe5\x67\x85\xff\x72\xbb\xfe\xdd\x44\xaa\x32\x2f\xf7\x1f\xb8\x01\xb8\x99\xd5\x6d\xfd\xb8\x5b\xd4\xda\xf5\x9e\x56\xd7\xab\xeb\xc6\x61\xaf\xa5\xb7\xcd\x42\xcd\xcd\xff\x5e\x38\x90\xb3\x2a\x5a\xc1\xb8\x65\xd2\xfe\x32\x59\xe1\x15\xca\xf4\xf7\xbf\x33\x95\xea\x5f\x9a\x97\x9f\xcd\x47\x22\xda\xd2\x4f\x2a\x27\xad\x03\xa3\x19\xdc\xc5\x9a\x61\x1c\x95\x7a\xad\x03\xbd\x53\xcd\x3f\xd5\x8e\x4d\xbd\xe3\x7c\x73\xeb\xcd\x0f\x8d\xf4\x05\x1b\x0c\x1c\xc1\x69\xdd\xac\x08\x1e\x8c\x57\x3b\x2b\x02\xd5\x33\xed\xb9\x44\xea\xe1\x82\xdc\xbf\xea\x1e\x99\x3d\x1a\xca\x5a\xbb\xae\x9f\xde\x22\x0b\x35\x2f\xf1\xcd\x70\xe0\xb1\xe5\xad\xa8\xbc\x8c\xb4\x97\x91\xb9\xff\xed\xc9\xd4\xe6\x82\x2c\xd9\xbb\xeb\xfe\xa4\xd9\x30\xf5\xaa\xd6\x33\x0d\xfb\x7b\xb5\xd0\x3e\xee\x99\x1b\x0d\xbd\x59\xab\xae\x78\xdb\xdf\x7d\xf6\x56\x2a\x91\x5a\x58\x90\xbf\x98\x36\xb5\x83\xa6\xee\xe5\x78\x5b\xdf\x19\xc4\xa5\xe6\xd6\x8a\x8a\xf0\xd2\x45\x3a\x29\x84\xf0\x0d\x2f\x21\x0a\x25\x55\xd9\x54\xca\xa2\xb4\xa3\x8a\xd2\x5e\xb1\x98\xb5\x4b\xa8\xfa\xe7\xa6\xf5\x08\xb3\xb7\x95\x8f\xd5\x50\xf6\x63\xad\xd9\xd3\x85\x18\x96\xbd\xb1\x53\x56\x0a\x9b\x25\xb1\xa5\xec\x0b\xff\xa3\x43\x94\x95\x0d\xa5\xac\x94\xf2\x4a\xe5\x34\x86\x40\x01\xa7\x7a\x7e\xa7\x54\x51\xcb\xb9\x42\x49\x15\xfe\x1b\xf3\x20\xa4\xdd\x72\x61\x3b\x57\xde\x0f\x37\x9e\x75\x63\xce\x24\x33\xf7\xde\x98\x4c\xe5\xe7\x87\x75\xeb\xe9\xe0\x5a\x75\xb7\xe6\xee\xdd\x3a\x57\x85\x15\x77\xeb\xdb\xfc\xfe\x0f\x00\x00\x00\x00\xc0\xf8\x63\xfd\x0f\x00\x00\x00\x00\xc0\xf8\xb3\xd6\xff\xf2\xec\xef\xa4\xd9\xdf\x5d\x74\x24\x00\x00\x00\x00\x00\xe0\xd5\x99\xb9\x32\x3f\x35\x3d\xbd\xa1\x7d\x6a\x74\x1a\xa6\xce\xef\xff\x00\x00\x00\x00\x00\x8c\x3f\xd6\xff\x00\x00\x00\x00\x00\x8c\x3f\xd6\xff\x00\x00\x00\x00\x00\x8c\x3f\xd6\xff\x00\x00\x00\x00\x00\x8c\x3f\xd6\xff\x00\x00\x00\x00\x00\x8c\xbf\xff\x0b\x00\x00\xff\xff\x99\xf4\xfc\x72\x00\x70\x02\x00")

func user_dataDbBytes() ([]byte, error) {
	return bindataRead(
		_user_dataDb,
		"user_data.db",
	)
}

func user_dataDb() (*asset, error) {
	bytes, err := user_dataDbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user_data.db", size: 159744, mode: os.FileMode(0755), modTime: time.Unix(1597509287, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x4, 0x23, 0xe7, 0x4, 0x25, 0xdf, 0xb, 0x5c, 0x2f, 0xe7, 0x6d, 0x44, 0x5f, 0xa0, 0xb4, 0x88, 0xf7, 0x31, 0x14, 0xcd, 0xb6, 0x47, 0xab, 0xd4, 0xde, 0xff, 0x52, 0xaa, 0x4f, 0x91, 0x59}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"user_data.db": user_dataDb,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"user_data.db": &bintree{user_dataDb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
