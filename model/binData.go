// This represents an empty user_data.db file when exported by
// JWLibrary. We use this as the base to reconstruct a
// merged backup file.

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// user_data.db (159.744kB)

package model

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _user_dataDb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xdc\x4f\x6f\x1b\xe9\x7d\xc0\xf1\xa1\x6c\x8b\x12\x6d\x49\xde\xf5\x6a\x19\x25\xab\xec\xa3\x5d\x6b\x45\xc2\x5c\x5b\x92\x6b\xa0\xda\xc0\x4d\x28\x6a\xa4\x65\x45\x51\x32\x39\xf2\xae\xb2\x28\x98\x91\x38\xa6\x59\x91\x1c\x85\x1c\xee\xae\x80\x22\x01\xdd\x75\x1b\x23\x40\x2f\x39\xe5\x52\xf4\x9e\xf7\xd0\x43\xdf\x40\xd1\x43\xd1\x16\x3d\x17\x08\x7a\x6b\x03\xf4\x50\xa3\x40\x31\x33\x1c\xcd\x5f\x52\xb2\xe3\x44\x00\xf3\xfd\x00\x59\x0d\x9f\x7f\xf3\x9b\x67\x9e\x99\x79\x9e\x99\xec\x96\x1f\x15\xea\x86\x26\x9e\xe8\xed\xa6\x6a\x88\xfb\xd2\x4d\x29\x16\x93\x7e\x20\x84\x24\x49\x6f\x4b\x92\xb4\x24\xb9\x1e\x4b\x92\x74\xd5\xf3\x3b\x26\x49\xd2\x84\x34\xdc\xdb\xd2\xdd\xef\xff\xdb\x35\x49\x92\xc6\x66\xfe\xc7\xfc\xfd\xfe\xcc\x4b\x7b\x03\x00\x00\x00\x00\x00\xfc\x1e\xbc\xfd\x8e\x24\x49\x6f\x4d\x4d\x99\xdb\x37\x2f\x3b\x18\x00\x00\x00\x00\x00\xf0\xbb\x64\xae\xff\x63\x33\xbf\x96\x66\x7e\x7d\xd9\x91\x00\x00\x00\x00\x00\x80\xdf\xd6\xbb\xb1\xb1\x07\xab\xcb\xab\xcb\x1f\x2f\xaf\x7d\xbc\x72\x5f\x59\x79\xf0\xc9\xfd\x3f\xfa\xe4\xc1\xf2\x0f\xf9\xfe\x0f\x00\x00\x00\x00\xc0\xe8\x4b\x48\xac\xff\x01\x00\x00\x00\x00\x18\x75\xce\xf7\xff\x99\xff\xba\xec\x48\x00\x00\x00\x00\x00\xc0\x9b\x34\x33\x31\x2f\x6d\xaa\x5f\xea\xed\xba\xa1\x39\xdf\xff\x67\x7e\x73\xd9\x51\x01\x00\x00\x00\x00\x80\x37\x6b\x6a\xd2\x59\xff\xf3\xef\xff\x03\x00\x00\x00\x00\x30\xfa\xf8\xf7\xff\x01\x00\x00\x00\x00\x18\x7d\xac\xff\x01\x00\x00\x00\x00\x18\x7d\xac\xff\x01\x00\x00\x00\x00\x18\x7d\xfc\xfb\xff\x00\x00\x00\x00\x00\x8c\x3e\xbe\xff\x03\x00\x00\x00\x00\x30\xfa\xf8\xfe\x0f\x00\x00\x00\x00\xc0\xe8\xe3\xfb\x3f\x00\x00\x00\x00\x00\xa3\x8f\xf5\x3f\x00\x00\x00\x00\x00\xa3\x6f\x6a\xfa\x86\x34\x25\x6d\x48\xd3\x7f\x37\xfd\x4e\xe2\x3f\xa6\xfe\x7d\xf2\x57\x89\xbf\xbf\xf6\x7c\xf2\x27\x93\x8f\x26\x6f\x8f\xfd\xef\xd8\x3f\x49\x1b\x63\x5f\x8c\x7d\x31\xbc\x8d\xe7\x89\xa9\x78\x72\x69\x29\xf6\xa2\x6c\xa8\x87\x0d\x6d\xaf\xa1\x9e\x36\xea\x1d\x63\x47\xab\xd6\x55\xdf\x8f\xe9\x5c\x49\xce\x2a\xb2\x50\xb2\xeb\x05\x59\xf8\xb2\x52\x09\x21\x84\x3f\x29\x5f\x35\x93\x44\xbe\xa8\xc8\x5b\x72\x49\x14\x77\x15\x51\xdc\x2f\x14\xc4\x5e\x29\xbf\x93\x2d\x1d\x88\x6d\xf9\x20\x63\xd5\xb2\x4a\x2b\xa7\x27\x9a\x70\x05\x6b\xd9\x25\x0b\xea\xa1\xd6\x10\x7e\x8a\xfc\xb9\x62\xe7\x6e\xd6\x1b\x5a\x4b\x6d\x6a\xc1\x5c\xb1\x5f\xcc\x3f\xda\x97\xfb\x4d\xe8\x47\xaa\x51\xd7\x5b\xfd\xe8\xbc\x3b\xeb\xb7\xb2\x5b\x92\xf3\x5b\x45\x33\xbc\x94\x5b\x38\x2d\x4a\xf2\xa6\x5c\x92\x8b\x39\xb9\x7c\xd6\x86\x37\xdf\xae\x9c\xdb\x2d\x96\x95\x52\x36\x5f\x54\xdc\xa3\xaa\x78\x76\x69\x47\x92\x3a\xcb\xcb\x88\x70\x13\x9f\xca\xb9\x6d\xbb\x3b\x4d\x9e\x7d\x88\x7c\xd9\xee\xc1\x6c\x71\xc3\x3d\x58\x33\xd1\xe9\x5a\x33\xc3\xee\x23\x4f\x6a\x5a\xec\x96\x06\x36\xe7\xad\xe9\x6b\x32\xdc\xdc\x6b\x37\xe5\xc4\xe1\x3b\x40\xf7\xa4\xe7\x8b\xa9\x95\x8c\x58\xcd\x88\xfb\xe9\x74\x22\xbd\x74\x63\x3c\xf9\xbd\xd9\x98\x54\x6f\x55\xb5\xaf\x3b\x3f\x6e\xd4\x0d\xad\xa2\x76\x0d\xdd\xfa\x5d\x29\xea\x86\x56\x59\x31\xff\x39\xf5\x7c\xe2\x7a\x3c\x39\x3b\x1b\x7b\xd1\xb1\x46\xad\x99\x66\xfe\xef\x86\x6f\x8c\x7e\x60\x26\x7d\x20\xec\xee\x34\xb7\x23\x4e\xfb\x90\x91\xb9\xd5\xad\x57\x43\xa3\xe9\xac\xb8\x77\x58\xed\x77\xb4\xf6\x8e\xda\x3e\x76\xda\xf7\x0d\xa9\xe0\x98\xf3\x65\x2a\x75\xa3\xa1\x45\x8e\xe7\x9c\xde\x32\xb4\x96\x11\x91\x53\x50\x3b\xc6\x8e\x5e\xad\x3f\xa9\x6b\xd5\x70\x5c\x1b\xf2\x66\x76\xbf\xa0\x88\x54\xc7\x68\x3f\x31\xea\x4d\x2d\xb5\xb4\x78\xf0\xf1\x62\xf3\xe3\xc5\xaa\xb2\xf8\xe9\x27\x8b\x3b\x9f\x2c\x96\x7f\xb8\x94\x11\x4b\x2d\xfd\xab\x25\xe7\xac\xac\x37\xf4\xa3\x63\xcf\x45\x18\xea\x1c\xa7\xd5\x65\x4f\xf9\x7c\x55\x6b\x19\x66\x14\x6d\xff\x31\xd9\xa7\x38\xe5\xb6\xf9\x50\x2c\x5b\xe3\x22\x54\xcb\x1d\x57\xc2\x5b\x7e\x5d\x56\x3e\x93\xe5\xa2\x58\xb1\x6a\xad\xa6\x07\x56\x0e\x8c\x2d\xef\xc5\xeb\x9e\x12\xdf\xc5\xeb\x24\x7b\xf3\x7f\xab\x2b\x3f\x91\xfe\xeb\xf7\xe2\xf1\xe4\xdc\x5c\xec\x6f\x6e\x59\x43\x51\x51\x6b\x3b\xea\x89\xfd\xcf\x09\xff\x70\xb4\x13\x9d\x01\x69\xff\x7a\xb5\x21\xe9\xdc\x62\xf3\x86\xd6\xb4\x6b\x0e\x1d\x6a\x81\xec\xe0\x25\x10\x1c\x8b\x6a\xcd\x9f\x3b\xe0\x3e\xbc\xa7\x77\xea\xe6\x5e\xce\x2b\xe7\xed\x51\xab\x6d\x5f\x67\x2a\x6a\xad\x9f\x1a\x2e\xed\x3f\x4c\x5f\x35\x6f\x56\xb0\xdc\x1b\xb8\x85\x7b\x2b\xdb\xdd\xe5\xab\x68\x26\x39\xe9\xa1\x7b\xbe\x75\x34\x95\xb3\xde\xe9\xdf\xed\xad\xd4\xcc\x59\xa7\x0d\xaa\xd6\x3f\x37\xfe\x4a\xc3\xf7\x14\x7e\xb2\xf4\xab\x9d\xfb\x54\xe9\xef\xcc\x77\xa7\x8f\x7e\xd0\x04\x06\xdc\x45\x1f\x2c\x43\xaa\x3b\x59\x9e\x18\x22\x5b\xbc\x58\xd5\x01\xe1\x9f\xdd\x18\x12\xe9\x3b\x89\xf1\xe4\xf7\xe7\x06\x3d\x52\xec\x8b\xb0\x72\xdf\xfe\x7b\xfd\xce\xe4\x05\x0a\xaf\xda\x7f\x13\x77\x26\x2e\x50\x78\xc5\xfe\x3b\xf9\xec\xe6\xb5\x78\xf2\xd6\xad\xd8\x37\x71\xe7\x2e\xa1\xa8\xb5\xf1\xd0\xfd\xc1\x73\x73\xf0\x5d\x8b\xe7\xdf\x1a\x02\x53\xa8\x01\xd7\x64\x31\x6a\x86\xe4\x2f\x92\x6f\xaa\x35\xcd\x33\x9b\x72\x1f\x3c\xce\x28\xb3\xa6\x2e\x66\x4b\xbe\xe1\xd5\xd0\x5a\x35\xe3\x69\xca\x4a\x17\x7f\x22\x96\x7d\x99\xfd\x67\xbd\x48\x2d\x67\x84\xf9\xbc\x37\xcf\xcc\xe2\xf8\x78\x72\xed\xd6\x90\xfe\xb3\x3a\x2f\xfe\xbc\x73\x25\x9e\x9c\x9f\x8f\xfd\x7c\xcd\xea\xb9\x75\x5d\x3f\x6e\xaa\xed\x63\xe7\xef\x55\x7f\x1f\x3a\xc9\x4e\x47\x3a\xbf\x03\x77\xb6\x0b\x74\x68\xd4\x5c\x71\xc8\x4d\xb1\x7b\xd8\xa8\xdb\x15\x7c\x15\xa3\x4b\x97\x1b\xba\x21\x22\x44\x97\x0e\x4e\x12\x86\x9c\xbc\x72\xab\x7e\x72\xa2\x85\xdb\x76\x4f\x62\xf0\x51\x3f\xb0\x43\xce\x79\xe4\x07\xea\xbd\xe1\x7b\x6f\x64\x77\xbe\xfa\x34\x3c\xb2\x99\x8a\xd5\xfb\xf6\x60\x16\xd1\x7b\xca\x58\x67\x28\x7d\x69\xf3\x99\x44\xfa\xde\xd5\xf1\x64\x6e\x7e\xd0\xc5\xe1\x8c\xea\xca\x8a\xb3\x75\x4d\x92\xa4\x09\x73\x3d\xd7\x9b\x1c\x8b\x27\x17\x17\x63\xbd\x7d\xeb\x72\xf1\x4e\x16\xbd\xdb\x57\x7c\x97\x8d\x37\x27\xe5\x9b\x5f\x46\x4e\x2e\x2f\x38\xb7\x4c\x3f\xfb\xb3\x58\x3c\xb9\xb0\x10\x7b\x7e\xcd\xbe\x74\xcd\x43\x2e\xa9\xad\x9a\x67\x6b\xcc\x17\x87\x9b\x2e\x52\x9e\x1f\xbe\xa9\x4e\xf4\x25\x7b\xee\x14\x36\x23\x82\x83\x37\x5c\xa2\x6c\xa8\x6d\x43\xd1\x8f\xb5\x96\x7f\x6c\x0b\xb9\x55\xf5\x24\x7b\x32\x06\xcc\xfc\x3d\x6d\x5a\xa3\x47\x0c\x19\x0d\x99\xd7\x9d\xb7\x8a\xf4\xd4\xd5\xdb\x52\x7c\xec\x67\xd2\xe4\xff\x4d\xfe\x43\xfc\x07\x57\x33\x63\x3f\xbb\xf2\x9b\xeb\x53\x63\x9f\x8d\x7d\x14\xbb\x9a\xf8\xd7\xc4\x53\x29\x25\x49\x63\x1f\x49\xd2\xd5\xdb\x63\x3f\xfa\x3d\xbd\x92\xc0\x1f\xa0\x67\x4f\xdf\xb6\x1e\xd1\xcf\x3f\xb4\xae\x73\x67\x8c\x3a\x7f\x67\xfd\x8f\x68\x27\xd9\x79\x44\x9f\x77\x0d\x85\x1f\xcd\x39\xbd\xa1\xb7\xf3\xe6\x9d\x70\xd8\x63\x73\xc0\xc2\x3b\xf8\xc4\x34\x4e\x1b\xda\xb9\x6d\x39\x31\x3a\xef\x04\x06\xbf\x0b\x78\xac\xb5\x3b\xde\xc5\xd1\xf9\x6b\xa3\x57\x5a\x6d\xde\xbb\x35\xec\xb9\xe0\x84\x59\x59\x71\xb6\xde\x4d\xfc\xb1\xfd\x5c\xf8\xab\xb7\xde\x8a\x27\xef\xdd\x8b\xfd\xfc\x91\xef\x3d\x9f\x39\xbd\xce\x3d\xad\x37\xaa\xa1\x84\x77\x22\xdf\xf7\x9d\x65\xa7\x42\x0b\x52\x2b\x39\x38\x5b\xba\xd0\xf9\x5c\x57\x3b\xda\x46\xb7\x6d\x1d\xa5\x52\x3f\x3a\xee\x44\x4c\x76\xa2\xfb\xd1\x3c\x44\xad\x1d\xb1\xd3\x70\x4d\x6f\x85\xa8\x57\x89\x2e\x77\xb2\x64\x97\xb6\x1f\x0b\xf5\xa6\x16\x19\x5b\x44\xf3\xe6\xe3\xa2\xad\xb6\xec\x15\x5f\xe8\xc0\x7c\x15\xc2\x2b\xfa\x8b\x1e\xfa\xb0\x05\xb3\xe3\x95\x16\xce\xc1\x55\xe2\x59\xdf\x7a\x17\x5a\xde\xfe\x0b\xa7\x07\x7a\x2a\x5c\x60\x48\xcf\x44\xbe\x65\xf4\xc5\xe0\x7d\xc7\x18\x8c\x23\x9c\x17\x11\x8b\x33\xbf\xb2\xda\x4f\x27\xd2\xdf\xfc\xf4\xa6\x35\x57\x7a\x91\x0d\x5d\x13\xde\xed\x5b\x03\xaf\x84\xf0\x45\x10\x3a\x87\x17\x58\x68\x0c\x1b\x8c\x11\x73\xfc\xec\xd1\x51\xb7\xad\x1e\x9d\x96\x0d\xd5\xd0\x9a\xde\x77\x84\x43\x6e\x72\xfd\xbe\xd8\x7d\xf2\xa4\xa3\x19\xfe\x71\xec\x1b\x8f\xe6\x09\x1a\x50\x2e\x5c\x32\x7b\xe4\x7f\x0f\x74\x5e\x18\xca\xd3\x6e\xf3\xb0\xa5\xd6\x1b\x83\x5e\xd6\x67\x06\x7e\x48\x78\x8d\x8b\xa1\x5f\x3d\xf2\xf5\x91\xfd\xd9\x22\x58\x32\x62\x39\x6b\x9d\x9c\xf0\x7a\x36\x7c\x0e\xf2\x45\x67\x6d\x6b\xbd\xcb\xf6\x16\x76\x7b\x2a\x50\x28\x91\x5e\x9b\x19\x4f\xee\x2c\x0d\xba\x9d\xfb\xe2\xab\xac\xfa\x7e\xde\x5c\x9b\xbe\x78\xd5\x15\xdf\xcf\x19\x49\x92\xfe\xf9\xb2\xe7\x0c\x6f\xdc\x8b\x93\x77\xac\x49\xc8\x2f\xee\xdb\x0b\x1f\xdd\xbf\xa8\x4b\xfa\x27\x21\x4e\xb2\x33\x09\x11\x83\x57\xfc\xe7\x5f\xc1\xa2\xff\xa2\xa1\xd8\x6d\x1e\x7a\x96\xc6\xa1\x4b\xc6\x1a\x12\x4f\xd5\x13\x43\x6b\x07\x8b\x86\xca\x6d\xe8\x47\x5d\x73\x60\x45\x07\xe3\x96\x53\xda\xea\xd1\xf1\xc0\x0b\xd0\x2d\x97\xef\x74\xba\x9a\xa2\xd6\x02\x3b\x3e\x6f\xd9\x6f\xda\xd6\x4e\xcb\xa7\xcd\x43\x3d\x70\x93\x72\x2f\x58\x61\x7d\xc7\x3b\xe9\x14\xd4\x56\xad\xab\xd6\xce\xff\x94\x27\x22\x5e\x58\x9d\x5f\x21\xfa\x35\x88\x3f\x8c\xfe\x3b\x2a\xf7\x6c\x64\xfc\x3d\x9e\x71\x8f\x26\xe3\x8b\x39\x63\x05\x94\x0e\xb5\xe4\x29\xee\xef\xc2\x60\x75\xf7\x84\x65\xec\x93\x12\x6a\xb1\xbf\x14\x4c\x78\xa3\x4f\xa5\x94\x83\x3d\xf9\xec\xd5\x98\xfd\x6e\xc0\xed\x70\xdf\xeb\xd1\x6c\x71\x23\x58\xd7\xfb\x3a\x22\xe5\x19\x32\xc1\x47\xa2\x27\x6b\xe1\xa1\x58\xee\xbf\x82\x70\x87\xac\xf7\x49\xed\x1f\xa1\xde\x1c\x7b\xac\x45\x3d\xa8\xad\x70\x7c\xd1\x04\x82\x71\x9a\x48\x05\x76\xea\x0d\xd2\x93\xe5\x06\x99\x0a\x87\xe3\xad\xe3\xcf\x75\xab\x5d\x2c\xd4\x95\xd7\xeb\x87\x01\xc7\xe6\xdf\x67\x7a\xc0\x5e\xcd\x53\x6d\xdd\xfe\x5f\x79\xdf\xe9\xb3\xd6\xfa\x33\x18\xfe\xfb\x7f\x00\x00\x00\x00\x00\x8c\x3e\xd6\xff\x00\x00\x00\x00\x00\x8c\x3e\xd6\xff\x00\x00\x00\x00\x00\x8c\x3e\xfe\xfb\xff\x00\x00\x00\x00\x00\x8c\x3e\xbe\xff\x03\x00\x00\x00\x00\x30\xfa\xf8\xfe\x0f\x00\x00\x00\x00\xc0\xe8\x63\xfd\x0f\x00\x00\x00\x00\xc0\xe8\xe3\xff\xff\x0f\x00\x00\x00\x00\xc0\xe8\xe3\xfb\x3f\x00\x00\x00\x00\x00\xa3\x8f\xf5\x3f\x00\x00\x00\x00\x00\xa3\x8f\xf5\x3f\x00\x00\x00\x00\x00\xa3\x8f\xf5\x3f\x00\x00\x00\x00\x00\xa3\x6f\xca\x5c\xfe\xc7\x7f\x29\xcd\xfc\xe3\xcc\xdf\x4e\xff\xc5\xf4\xd6\xd4\xbf\xdc\x78\x79\xe3\xcf\xaf\xff\xe7\xf5\x1f\x25\x5e\x26\x7e\x95\x98\x99\xfc\xe9\xc4\xcb\x89\x5f\xc4\x7f\x79\xd9\x71\x02\x00\xf0\x07\xa1\xf7\xd5\xed\xf8\xec\xe2\xe2\xc4\x5f\x3e\xf8\xb2\xae\x7d\xb5\xd7\x50\x4f\x1b\xf5\x8e\xf1\x38\xb0\x9d\x2b\xc9\x59\x45\x16\x8f\xf3\xf2\x67\xc2\x9b\x2e\xb2\xe5\x84\x10\x65\xb9\x20\xe7\x14\x61\xdc\x2d\xaa\x4d\x2d\x23\x8c\xbb\xf9\xa6\x5a\xd3\x36\xeb\x0d\xad\x65\x25\xe4\xf4\x6e\xcb\x48\x19\xcd\xbb\x8a\x5a\xcb\x57\xd3\x22\x5b\x16\x79\x43\x6b\x5a\xc9\x09\x21\x36\x4b\xbb\x3b\x42\x51\x6b\xc2\x10\x05\x79\x53\x11\x7f\xba\x9b\x2f\x9a\xbf\x77\xd4\x13\x61\x34\xc5\x6e\x51\x38\x55\x1f\x1a\xf6\xdf\x84\x10\x9f\x7d\x2a\x97\x64\x61\xdc\x55\x4e\x4f\xb4\x87\xab\x09\x21\xb6\x4a\xbb\xfb\x7b\x62\xfd\x40\xb8\x65\x76\x4b\x1b\x72\xc9\x4e\x32\x23\x13\xb9\xdd\x42\xc1\x3c\x8c\xe2\x6e\x2e\x5b\x96\x9f\x7c\x18\x4f\xae\xcd\xc7\x7a\x57\xea\xad\xaa\xf6\x75\xfe\xf3\xca\x7e\x47\x6b\xef\xa8\xed\xe3\x4a\x41\x3f\x52\x8d\xba\xde\xca\x57\x9d\xa4\xa5\x7e\x07\xe4\x8b\x1b\xf2\xe7\x22\xba\xac\x19\xa8\x93\x9c\x72\x93\xd3\xbd\xd8\x07\xf1\xe4\xf6\x5c\xac\x77\xc7\xd9\x91\x7d\x6c\x95\xa2\x6e\x68\xf9\x6a\xc5\x8a\xb6\xb2\xa7\x77\xea\x66\x05\x3b\xef\xa3\xe0\xfe\x86\x55\x31\x77\x6c\xe7\xa7\xec\xfc\x8c\xb0\x0a\x64\x84\x53\x22\xdd\x9b\x5a\x88\x27\xcb\x73\xb1\xde\xf7\x02\x31\xb8\x71\x46\xc6\xb1\x38\x20\x8e\x81\xd5\x3c\xb1\xb8\x65\x22\xe2\x99\x13\xf1\xe4\x17\x73\xb1\xde\x76\x20\x1e\x67\x70\x99\xe3\x63\x40\x4c\xb7\x07\xc4\x34\xb4\xaa\x27\x2e\x7f\xb9\x70\x6c\xc5\xf7\xc7\x93\x77\xe6\x62\xb5\x40\x64\x56\x31\x7b\xfb\xc3\x01\x11\x58\x45\x3c\x7b\xb2\x87\xfb\xd1\x77\xe3\xc9\xb5\x5b\xb1\x5e\xdc\xd3\x60\xc5\x1c\x8f\x15\x73\xec\x9e\xb5\xfb\x41\x44\xa3\xc1\x62\xfd\xb6\x53\xf6\x75\x66\xa6\xf7\xc3\x4f\xf7\xe2\xf3\xf1\xe4\xa3\xd9\x58\xef\x81\xb3\x17\x73\x28\x78\xcf\xd3\x7a\x43\x3f\x3a\xce\x57\xb5\x96\x51\x7f\x52\xd7\xda\x66\xf6\x42\x70\x97\xe7\xd4\x31\x77\x6f\x16\xf1\x9d\xda\x40\x99\xf4\x4f\xde\x8b\x27\xb7\x67\x63\xbd\xb4\x3f\x10\xb5\x63\xec\xe8\x55\xb3\x48\xd5\xb3\x07\x33\x4f\x44\x47\x11\x5d\xc1\x0d\xc1\x93\x9f\x11\xde\xcb\x6d\xfa\x3b\xf1\x64\x79\x3e\xd6\x5b\x73\x02\x70\x32\x2b\x3b\xda\x49\xa7\xa0\xb6\x6a\x5d\xb5\xa6\x55\x36\xf4\xa3\x6e\x53\x6b\x19\xf9\xaa\x93\xff\xdd\x60\x20\xe7\x55\x34\x83\x71\xca\xa4\xbc\x65\x32\xc2\x2d\x94\xee\x1d\x7c\x7b\x22\xd9\xbb\x32\x1f\x7b\x36\x1f\x8a\x68\x5b\x3b\x2d\x9f\x36\x0f\xf5\x86\x7f\x17\xeb\xba\x7e\x5c\xec\x36\x0f\xb5\x76\x25\xf7\x54\x3d\x31\xb4\xb6\xfd\xcb\xa9\x37\x3f\x30\xd2\x57\x6c\xd0\x77\x04\x67\x75\x33\xc2\x7f\x30\x6e\xed\x8c\xf0\x55\x4f\xb7\xe6\xe2\xc9\x87\x0b\xb1\xde\x75\xe7\xc8\xac\xd1\x50\x52\x5b\x35\xed\xec\x16\x99\xaf\xba\x89\xef\x05\x03\x8f\x2c\x6f\x46\xe5\x66\xa4\xdc\x8c\xf4\xfd\x6f\x8d\x27\xb7\x16\x62\x92\xb5\xbb\xce\x8f\x1b\x75\x43\xab\xa8\x5d\x43\xb7\x7e\x57\xf2\xad\x93\xae\xb1\x59\xd7\x1a\xd5\xca\x8a\xbb\xfd\x9d\x67\xef\x27\xe3\xc9\x85\x85\xd8\x37\x93\x86\x7a\xd8\xd0\xdc\x1c\x77\xeb\xdb\xfd\xb8\x94\xec\x7a\x41\x16\x6e\xba\x48\x25\x84\x10\x9e\xe1\x25\x44\xbe\xa8\xc8\x5b\x72\x49\x14\x77\x15\x51\xdc\x2f\x14\x32\x56\x09\x45\xfb\xda\x30\x1f\x61\xd6\xb6\xfc\xb9\x12\xc8\x7e\xac\x36\xba\x9a\x10\x83\xb2\x37\x77\x4b\x72\x7e\xab\x28\xb6\xe5\x03\xe1\x7d\x74\x88\x92\xbc\x29\x97\xe4\x62\x4e\x2e\x9f\xc5\xe0\x2b\x60\x57\xcf\xed\x16\xcb\x4a\x29\x9b\x2f\x2a\xc2\x7b\x63\xee\x87\xb4\x57\xca\xef\x64\x4b\x07\xc1\xc6\x33\x4e\xcc\xe9\x44\xfa\xde\xbb\xe3\xc9\xdc\xfc\xa0\x6e\x3d\x1b\x5c\xab\xce\xd6\xdc\xbd\xd9\x0b\x55\x58\x71\xb6\xbe\xc5\xf7\x7f\x00\x00\x00\x00\x00\x46\x1f\xeb\x7f\x00\x00\x00\x00\x00\x46\x9f\xb3\xfe\x9f\xf9\xef\xcb\x8e\x04\x00\x00\x00\x00\x00\xbc\x51\xd3\x93\x93\x9b\xea\x97\x7a\xbb\x6e\x68\x7c\xff\x07\x00\x00\x00\x00\x60\xf4\xb1\xfe\x07\x00\x00\x00\x00\x60\xf4\xb1\xfe\x07\x00\x00\x00\x00\x60\xf4\xb1\xfe\x07\x00\x00\x00\x00\x60\xf4\xb1\xfe\x07\x00\x00\x00\x00\x60\xf4\xfd\x7f\x00\x00\x00\xff\xff\x3f\x39\x6e\xaf\x00\x70\x02\x00")

func user_dataDbBytes() ([]byte, error) {
	return bindataRead(
		_user_dataDb,
		"user_data.db",
	)
}

func user_dataDb() (*asset, error) {
	bytes, err := user_dataDbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user_data.db", size: 159744, mode: os.FileMode(0755), modTime: time.Unix(1600011412, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0xae, 0x73, 0x94, 0x71, 0x14, 0x4f, 0xd8, 0x81, 0x53, 0x44, 0xbf, 0x47, 0x9f, 0xc5, 0xd8, 0x46, 0x8d, 0xf9, 0xe9, 0xd5, 0xa2, 0x7a, 0xea, 0xe8, 0x8a, 0x14, 0x4e, 0x51, 0xc9, 0x7b, 0xdd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"user_data.db": user_dataDb,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"user_data.db": &bintree{user_dataDb, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
